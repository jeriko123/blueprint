{"version":3,"sources":["components/Navbar/Navbar.tsx","components/Table/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","state","alignRight","handleDarkTheme","props","onDarkClick","this","exampleMenu","icon","text","shouldDismissPopover","onClick","onTableClick","disabled","className","classNames","Classes","NAVBAR","align","Alignment","LEFT","MINIMAL","onHomeClick","content","interactionKind","popoverClassName","POPOVER_CONTENT_SIZING","placement","isDark","RIGHT","ALIGN_RIGHT","React","TableDollarExample","columnNames","sparseCellData","sparseCellIntent","Intent","DANGER","sparseColumnIntents","renderCell","rowIndex","columnIndex","dataKey","value","intent","onCancel","cellValidator","onChange","onConfirm","cellSetter","renderColumnHeader","name","isValidValue","setSparseState","columns","map","_","index","cellRenderer","columnHeaderCellRenderer","numRows","test","stateKey","stateData","values","setState","FocusStyleManager","onlyShowFocusOnTabs","App","useState","setIsDark","isTable","setIsTable","Date","date","setDate","document","body","style","display","justifyContent","TEXT_LARGE","MONOSPACE_TEXT","width","flexDirection","padding","href","position","right","top","ELEVATION_1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1ae8592.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  Alignment,\r\n  Button,\r\n  Classes,\r\n  H5,\r\n  Navbar,\r\n  NavbarDivider,\r\n  NavbarGroup,\r\n  NavbarHeading,\r\n  Switch,\r\n  Divider,\r\n  Menu,\r\n  MenuDivider,\r\n  MenuItem,\r\n  Popover,\r\n} from \"@blueprintjs/core\";\r\n\r\nexport interface INavbarExampleState {\r\n  alignRight: boolean;\r\n  isDark: boolean;\r\n  onTableClick: any;\r\n  onDarkClick: any;\r\n  onHomeClick: any;\r\n}\r\n\r\nexport class NavBar extends React.PureComponent<INavbarExampleState> {\r\n  public state = {\r\n    alignRight: false,\r\n  };\r\n\r\n  //   public handleDarkTheme() {\r\n  //     this.setState({ isDark: !this.state.isDark });\r\n  //   }\r\n\r\n  public handleDarkTheme = () => this.props.onDarkClick();\r\n\r\n  public render() {\r\n    const { alignRight } = this.state;\r\n    const exampleMenu = (\r\n      <Menu>\r\n        <MenuItem icon=\"graph\" text=\"Graph\" />\r\n        <MenuItem icon=\"map\" text=\"Map\" />\r\n        <MenuItem\r\n          icon=\"th\"\r\n          text=\"Table\"\r\n          shouldDismissPopover={true}\r\n          onClick={this.props.onTableClick}\r\n        />\r\n        <MenuItem icon=\"zoom-to-fit\" text=\"Nucleus\" disabled={true} />\r\n        <MenuDivider />\r\n        <MenuItem icon=\"cog\" text=\"Settings...\">\r\n          <MenuItem icon=\"add\" text=\"Add new application\" disabled={true} />\r\n          <MenuItem icon=\"remove\" text=\"Remove application\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    );\r\n    return (\r\n      <Navbar className={classNames(Classes.NAVBAR)}>\r\n        <NavbarGroup align={Alignment.LEFT}>\r\n          <NavbarHeading>Blueprint</NavbarHeading>\r\n          <NavbarDivider />\r\n          <Button\r\n            className={Classes.MINIMAL}\r\n            icon=\"home\"\r\n            text=\"Home\"\r\n            onClick={this.props.onHomeClick}\r\n          />\r\n\r\n          <Popover\r\n            content={exampleMenu}\r\n            interactionKind=\"hover\"\r\n            popoverClassName={Classes.POPOVER_CONTENT_SIZING}\r\n            placement=\"bottom\"\r\n          >\r\n            <Button className={Classes.MINIMAL} icon=\"document\" text=\"Files\" />\r\n          </Popover>\r\n          <Button\r\n            className={Classes.MINIMAL}\r\n            icon={this.props.isDark ? \"flash\" : \"moon\"}\r\n            text={this.props.isDark ? \"light theme\" : \"dark theme\"}\r\n            onClick={this.handleDarkTheme}\r\n          />\r\n        </NavbarGroup>\r\n        <NavbarGroup align={Alignment.RIGHT}>\r\n          <NavbarDivider className={Classes.ALIGN_RIGHT} />\r\n          <Button\r\n            className={classNames(Classes.MINIMAL, Classes.ALIGN_RIGHT)}\r\n            icon=\"user\"\r\n          />\r\n          <Button\r\n            className={classNames(Classes.MINIMAL, Classes.ALIGN_RIGHT)}\r\n            icon=\"notifications\"\r\n          />\r\n          <Button\r\n            className={classNames(Classes.MINIMAL, Classes.ALIGN_RIGHT)}\r\n            icon=\"cog\"\r\n          />\r\n        </NavbarGroup>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Intent } from \"@blueprintjs/core\";\r\nimport {\r\n  Cell,\r\n  Column,\r\n  Table2,\r\n  EditableCell2,\r\n  ColumnHeaderCell,\r\n  EditableName,\r\n} from \"@blueprintjs/table\";\r\n\r\ninterface iTableState {\r\n  columnNames: string[];\r\n  sparseCellData: { [key: string]: string };\r\n  sparseCellIntent: { [key: string]: Intent };\r\n  sparseColumnIntents?: Intent[];\r\n}\r\n\r\nexport class TableDollarExample extends React.PureComponent {\r\n  public static dataKey = (rowIndex: number, columnIndex: number) => {\r\n    return `${rowIndex}-${columnIndex}`;\r\n  };\r\n\r\n  public state: iTableState = {\r\n    columnNames: [\"Column1\", \"Column2\", \"Column2\", \"Column3\", \"Column4\", \"Column5\"],\r\n    sparseCellData: {\r\n      \"1-1\": \"editable\",\r\n      \"3-1\": \"validation 123\",\r\n    },\r\n    sparseCellIntent: {\r\n      \"3-1\": Intent.DANGER,\r\n    },\r\n    sparseColumnIntents: [],\r\n  };\r\n\r\n  public render() {\r\n    const columns = this.state.columnNames.map((_: string, index: number) => {\r\n      return (\r\n        <Column\r\n          key={index}\r\n          cellRenderer={this.renderCell}\r\n          columnHeaderCellRenderer={this.renderColumnHeader}\r\n        />\r\n      );\r\n    });\r\n\r\n    return <Table2 numRows={10}>{columns}</Table2>;\r\n  }\r\n\r\n  public renderCell = (rowIndex: number, columnIndex: number) => {\r\n    // <Cell>{`$${(rowIndex * 10).toFixed(2)}`}</Cell>\r\n    const dataKey = TableDollarExample.dataKey(rowIndex, columnIndex);\r\n    const value = this.state.sparseCellData[dataKey];\r\n    return (\r\n      <EditableCell2\r\n        value={value == null ? \"\" : value}\r\n        intent={this.state.sparseCellIntent[dataKey]}\r\n        onCancel={this.cellValidator(rowIndex, columnIndex)}\r\n        onChange={this.cellValidator(rowIndex, columnIndex)}\r\n        onConfirm={this.cellSetter(rowIndex, columnIndex)}\r\n      />\r\n    );\r\n  };\r\n\r\n  public renderColumnHeader = (columnIndex: number) => {\r\n    return <ColumnHeaderCell name={this.state.columnNames[columnIndex]} />;\r\n  };\r\n\r\n  private isValidValue(value: string) {\r\n    return /^[a-zA-Z]*$/.test(value);\r\n  }\r\n\r\n  private cellValidator = (rowIndex: number, columnIndex: number) => {\r\n    const dataKey = TableDollarExample.dataKey(rowIndex, columnIndex);\r\n    return (value: string) => {\r\n      const intent = this.isValidValue(value) ? null : Intent.DANGER;\r\n      this.setSparseState(\"sparseCellIntent\", dataKey, intent);\r\n      this.setSparseState(\"sparseCellData\", dataKey, value);\r\n    };\r\n  };\r\n\r\n  private cellSetter = (rowIndex: number, columnIndex: number) => {\r\n    const dataKey = TableDollarExample.dataKey(rowIndex, columnIndex);\r\n    return (value: string) => {\r\n      const intent = this.isValidValue(value) ? null : Intent.DANGER;\r\n      this.setSparseState(\"sparseCellData\", dataKey, value);\r\n      this.setSparseState(\"sparseCellIntent\", dataKey, intent);\r\n    };\r\n  };\r\n\r\n  private setSparseState<T>(stateKey: string, dataKey: string, value: T) {\r\n    const stateData = (this.state as any)[stateKey] as { [key: string]: T };\r\n    const values = { ...stateData, [dataKey]: value };\r\n    this.setState({ [stateKey]: values });\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { NavBar } from \"./components/Navbar/Navbar\";\nimport classNames from \"classnames\";\nimport { Classes, Drawer } from \"@blueprintjs/core\";\nimport { FocusStyleManager } from \"@blueprintjs/core\";\nimport { DatePicker, TimePrecision } from \"@blueprintjs/datetime\";\nimport { TableDollarExample } from \"./components/Table/Table\";\nFocusStyleManager.onlyShowFocusOnTabs();\n\nfunction App() {\n  const [isDark, setIsDark] = React.useState(false);\n  const [isTable, setIsTable] = React.useState(false);\n  const [showTimeArrowButtons, setShowTimeArrowButtons] = React.useState(false);\n  const [date, setDate] = React.useState(new Date());\n\n  const handleDateChange = (date: Date) => {\n    setDate(date);\n  };\n\n  document.body.className = isDark ? \"bp3-dark\" : \"bp3-body\";\n  return (\n    <div>\n      <NavBar\n        alignRight\n        isDark={isDark}\n        onDarkClick={() => setIsDark(!isDark)}\n        onTableClick={() => setIsTable(!isTable)}\n        onHomeClick={() => setIsTable(false)}\n      />\n      <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n        {!isTable && (\n          <div\n            className={classNames(Classes.TEXT_LARGE, Classes.MONOSPACE_TEXT)}\n            style={{\n              display: \"flex\",\n              width: \"60%\",\n              flexDirection: \"column\",\n              padding: 25,\n            }}\n          >\n            <p>\n              We build products that make people better at their most important\n              work — the kind of work you read about on the front page of the\n              newspaper, not just the technology section.\n            </p>\n            <ul>\n              <li>\n                Item the <code>first</code>.\n              </li>\n              <li>Item the .</li>\n              <li>\n                Item the <a href=\"#core/typography.running-text\">third</a>.\n              </li>\n            </ul>\n            <h3>Scale, Speed, Agility</h3>\n            <p>\n              A successful data transformation requires the whole organization —\n              users, the IT shop, and leadership — to operate in lockstep. With\n              Foundry, the enterprise comes together to transform the\n              organization and turn data into a competitive advantage.\n            </p>\n          </div>\n        )}\n\n        {isTable && (\n          <div style={{ padding: 25 }}>\n            <TableDollarExample />\n          </div>\n        )}\n      </div>\n      <div style={{ position: \"fixed\", right: 10, top: 65 }}>\n        <DatePicker\n          className={Classes.ELEVATION_1}\n          onChange={handleDateChange}\n          // timePickerProps={{ showArrowButtons: showTimeArrowButtons }}\n          value={date}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}